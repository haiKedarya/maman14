#include <bool.h>
#define DOT 46
int main(int argc, char *argv[]){
    printf("\nmain");
    FILE *fp1, *fp2, *fp3;/*creation of 3 pointers to file printing*/
    FILE *fr;/*creation of file reading*/
    char *fileName;
    if( argc == 1  || argc == 0) {/*we dont have any file names*/
      printf("at least one argument expected.\n");
      return 0;
    }else if(argc == 2){/*we have only 1 file name*/
	fileName = checkCommandLineInput(2, *argv[]);
    }else{/*we have more then 1 file name*/
    	for(int i = 2; i < argc; i++){
	    fileName = checkCommandLineInput(i, *argv[]);/*here the loop will run on each file*/
	}
    }
    
    typedef struct mila{ 
	char opCode[6];
	char sourceMiun[2];
	char sourceRegister[3];
	char destinationMiun[2];
	char destinationRegister[3];
	char funct[5];
	char Are[3];
    };

}
bool assignValueToFiles()
/* this method check the command line argument
if the argument is legal the method will return the location of '.' in argv so we can 
extract the file name
if the argument is not legal the method will return 0 */
char *checkCommandLineInput(int location, char *argv[]){
    printf("check input");
    int i = 0;
    
    while(i < strlen(argv[location])){
	if(*argv[location][i] == DOT){
	    break;/*so we save the location of '.'  in i*/
	}
	i++;
    }
    char *str = (char*) malloc(10*sizeof(char)); 
    memcpy(str, argv[location], i);
    return str;
}
int convertCharArrToInt(char [], int arrSize){
    struct {
	unsigned int x:2;

}
